Exercise on Aggregate functions:-

                 database name-  orders     
                 table name-          orders
ord_no      purch_amt      ord_date     customer_id     salesman_id
70001       150.5               2012-10-05     3005                     5002
70009       270.65            2012-09-10     3001                      5005
70002       65.26              2012-10-05     3002                      5001
70004       110.5              2012-08-17     3009                      5003
70007       948.5              2012-09-10     3005                      5002
70005       2400.6      2012-07-27          3007                       5001
70008       5760        2012-09-10            3002                       5001
70010       1983.43     2012-10-10  3004                             5006
70003       2480.4      2012-10-10  3009                              5003
70012       250.45      2012-06-27  3008                              5002
70011       75.29       2012-08-17  3003                               5007
70013       3045.6      2012-04-25  3002                             5001

To see the whole table or schema or relation:-
select * from orders.orders;

1. From the following table, write a SQL query to calculate total purchase amount of all orders. Return total purchase amount.
select sum(purch_amt) from orders.orders;

2. From the following table, write a SQL query to calculate the average purchase amount of all orders. Return average purchase 
amount.
select avg(purch_amt) from orders.orders;

3. From the following table, write a SQL query that counts the number of unique salespeople. Return number of salespeople.
select count(distinct salesman_id) from orders.orders;

9. From the following table, write a SQL query to find the highest purchase amount ordered by each customer. Return customer ID, 
maximum purchase amount.
select customer_id,max(purch_amt) from orders.orders group by customer_id;

10. From the following table, write a SQL query to find the highest purchase amount ordered by each customer on a particular date. 
Return, order date and highest purchase amount. [group by two column names customer_id and ord_date]
select customer_id,ord_date,max(purch_amt) from orders.orders group by customer_id,ord_date;

11. From the following table, write a SQL query to determine the highest purchase amount made by each salesperson on '2012-08-17'. 
Return salesperson ID, purchase amount 
select salesman_id,max(purch_amt) from orders.orders where ord_date='2012-08-17' group by salesman_id;

12. From the following table, write a SQL query to find the highest order (purchase) amount by each customer on a particular order 
date. Filter the result by highest order (purchase) amount above 2000.00. Return customer id, order date and maximum purchase 
amount.
select customer_id,ord_date,max(purch_amt) from orders.orders where purch_amt>2000.00 group by customer_id,ord_date;

13. From the following table, write a SQL query to find the maximum order (purchase) amount in the range 2000 - 3000 (Begin and 
end values are included.) by combination of each customer and order date. Return customer id, order date and maximum purchase 
amount.
select customer_id,ord_date,max(purch_amt) from orders.orders where purch_amt>=2000.00 and purch_amt<=3000.00 group by 
customer_id,ord_date;

14. From the following table, write a SQL query to find the maximum order (purchase) amount based on the combination of each 
customer and order date. Filter the rows for maximum order (purchase) amount is either 2000, 3000, 5760, 6000. Return customer id,
 order date and maximum purchase amount.
select customer_id,ord_date,max(purch_amt) from orders.orders where purch_amt in (2000, 3000, 5760, 6000) group by 
customer_id,ord_date;

                 database name-  orders     
                 table name-          customer
customer_id |   cust_name    |    city    | grade | salesman_id 
        3002 | Nick Rimando   | New York   |   100 |        5001
        3007 | Brad Davis     | New York   |   200 |        5001
        3005 | Graham Zusi    | California |   200 |        5002
        3008 | Julian Green   | London     |   300 |        5002
        3004 | Fabian Johnson | Paris      |   300 |        5006
        3009 | Geoff Cameron  | Berlin     |   100 |        5003
        3003 | Jozy Altidor   | Moscow     |   200 |        5007
        3001 | Brad Guzan     | London     |       |        5005

To create the table or relation:-
CREATE TABLE `orders`.`customer` (
  `customer_id` INT NOT NULL,
  `cust_name` VARCHAR(45) NULL,
  `city` VARCHAR(45) NULL,
  `grade` INT NULL,
  `salesman_id` INT NULL,
  PRIMARY KEY (`customer_id`));

To insert data in the table or relation:-
INSERT INTO `orders`.`customer` (`customer_id`, `cust_name`, `city`, `grade`, `salesman_id`) VALUES ('3002', 'Nick Rimando', 
'New York', '100', '5001');
INSERT INTO `orders`.`customer` (`customer_id`, `cust_name`, `city`, `salesman_id`) VALUES ('3001', 'Brad Guzan', 'London', '5005');

To see the whole table or schema or relation:-
select * from orders.customer;

5. From the following table, write a SQL query to determine the number of customers who received at least one grade for their activity. 
select count(customer_id) from orders.customer where grade in(select grade from orders.customer); /*rule of nested subquery will 
be followed*/

8. From the following table, write a SQL query to find the highest grade of the customers in each city. Return city, maximum grade.
select city,max(grade) from orders.customer group by city;

